<?php
/*
 * This file is part of the Gallery package.
 * (c) Michal Giergielewicz <michal@giergielewicz.pl>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Freyr\GalleryBundle\Repository;

use Doctrine\ODM\MongoDB\DocumentRepository;
use Freyr\GalleryBundle\Document\Image;
use Freyr\GalleryBundle\Document\Keyword;

/**
 * ImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImageRepository extends DocumentRepository
{
    /**
     * @param $keyword
     * @param $imageId
     * @return Image
     */
    public function getByKeywordAndId($keyword, $imageId)
    {
        return $this->findOneBy(["keywords.name" => $keyword, "id" => new \MongoId($imageId)]);
    }

    /**
     * @return Keyword[]
     */
    public function getAllUniqueKeywords()
    {
        $cursor = $this->createQueryBuilder()->distinct('keywords.name')->getQuery()->execute();

        $result = [];
        foreach ($cursor as $value)
        {
            $result[] = new Keyword($value);
        }

        return $result;
    }

    public function getByKeywords(array $keywords)
    {

        $cursor = $this->createQueryBuilder('')
            ->field('keywords.name')
            ->in($keywords)
            ->getQuery()->execute();

        $images = [];
        /** @var Image $image */
        foreach($cursor as $image)
        {
            $image->setCurrentKeyword($keywords);
            $image->setThumbImageUrl(cloudinary_url($image->getCloudinaryId(), ['width' => '250']));
            $image->setImageUrl(cloudinary_url($image->getCloudinaryId(), ['width' => '650']));
            $image->setBigImageUrl(cloudinary_url($image->getCloudinaryId(), ['width' => '950']));
            $images[] = $image;
        }

        return $images;
    }

    /**
     * @param Image $image
     */
    public function save(Image $image)
    {
        $this->getDocumentManager()->persist($image);
        $this->getDocumentManager()->flush();
    }
}
